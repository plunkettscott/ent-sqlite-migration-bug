// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/internal/ent/discordguild"
	"entgo.io/bug/internal/ent/discordrole"
	"entgo.io/bug/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscordGuildUpdate is the builder for updating DiscordGuild entities.
type DiscordGuildUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordGuildMutation
}

// Where appends a list predicates to the DiscordGuildUpdate builder.
func (dgu *DiscordGuildUpdate) Where(ps ...predicate.DiscordGuild) *DiscordGuildUpdate {
	dgu.mutation.Where(ps...)
	return dgu
}

// SetDiscordID sets the "discord_id" field.
func (dgu *DiscordGuildUpdate) SetDiscordID(s string) *DiscordGuildUpdate {
	dgu.mutation.SetDiscordID(s)
	return dgu
}

// SetName sets the "name" field.
func (dgu *DiscordGuildUpdate) SetName(s string) *DiscordGuildUpdate {
	dgu.mutation.SetName(s)
	return dgu
}

// SetDescription sets the "description" field.
func (dgu *DiscordGuildUpdate) SetDescription(s string) *DiscordGuildUpdate {
	dgu.mutation.SetDescription(s)
	return dgu
}

// SetIcon sets the "icon" field.
func (dgu *DiscordGuildUpdate) SetIcon(s string) *DiscordGuildUpdate {
	dgu.mutation.SetIcon(s)
	return dgu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (dgu *DiscordGuildUpdate) SetNillableIcon(s *string) *DiscordGuildUpdate {
	if s != nil {
		dgu.SetIcon(*s)
	}
	return dgu
}

// ClearIcon clears the value of the "icon" field.
func (dgu *DiscordGuildUpdate) ClearIcon() *DiscordGuildUpdate {
	dgu.mutation.ClearIcon()
	return dgu
}

// SetBanner sets the "banner" field.
func (dgu *DiscordGuildUpdate) SetBanner(s string) *DiscordGuildUpdate {
	dgu.mutation.SetBanner(s)
	return dgu
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (dgu *DiscordGuildUpdate) SetNillableBanner(s *string) *DiscordGuildUpdate {
	if s != nil {
		dgu.SetBanner(*s)
	}
	return dgu
}

// ClearBanner clears the value of the "banner" field.
func (dgu *DiscordGuildUpdate) ClearBanner() *DiscordGuildUpdate {
	dgu.mutation.ClearBanner()
	return dgu
}

// SetPermissions sets the "permissions" field.
func (dgu *DiscordGuildUpdate) SetPermissions(s string) *DiscordGuildUpdate {
	dgu.mutation.SetPermissions(s)
	return dgu
}

// SetJoinedAt sets the "joined_at" field.
func (dgu *DiscordGuildUpdate) SetJoinedAt(t time.Time) *DiscordGuildUpdate {
	dgu.mutation.SetJoinedAt(t)
	return dgu
}

// AddRoleIDs adds the "roles" edge to the DiscordRole entity by IDs.
func (dgu *DiscordGuildUpdate) AddRoleIDs(ids ...int) *DiscordGuildUpdate {
	dgu.mutation.AddRoleIDs(ids...)
	return dgu
}

// AddRoles adds the "roles" edges to the DiscordRole entity.
func (dgu *DiscordGuildUpdate) AddRoles(d ...*DiscordRole) *DiscordGuildUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.AddRoleIDs(ids...)
}

// Mutation returns the DiscordGuildMutation object of the builder.
func (dgu *DiscordGuildUpdate) Mutation() *DiscordGuildMutation {
	return dgu.mutation
}

// ClearRoles clears all "roles" edges to the DiscordRole entity.
func (dgu *DiscordGuildUpdate) ClearRoles() *DiscordGuildUpdate {
	dgu.mutation.ClearRoles()
	return dgu
}

// RemoveRoleIDs removes the "roles" edge to DiscordRole entities by IDs.
func (dgu *DiscordGuildUpdate) RemoveRoleIDs(ids ...int) *DiscordGuildUpdate {
	dgu.mutation.RemoveRoleIDs(ids...)
	return dgu
}

// RemoveRoles removes "roles" edges to DiscordRole entities.
func (dgu *DiscordGuildUpdate) RemoveRoles(d ...*DiscordRole) *DiscordGuildUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dgu *DiscordGuildUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dgu.hooks) == 0 {
		affected, err = dgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordGuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dgu.mutation = mutation
			affected, err = dgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dgu.hooks) - 1; i >= 0; i-- {
			if dgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dgu *DiscordGuildUpdate) SaveX(ctx context.Context) int {
	affected, err := dgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dgu *DiscordGuildUpdate) Exec(ctx context.Context) error {
	_, err := dgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgu *DiscordGuildUpdate) ExecX(ctx context.Context) {
	if err := dgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dgu *DiscordGuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordguild.Table,
			Columns: discordguild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordguild.FieldID,
			},
		},
	}
	if ps := dgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dgu.mutation.DiscordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldDiscordID,
		})
	}
	if value, ok := dgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldName,
		})
	}
	if value, ok := dgu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldDescription,
		})
	}
	if value, ok := dgu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldIcon,
		})
	}
	if dgu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: discordguild.FieldIcon,
		})
	}
	if value, ok := dgu.mutation.Banner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldBanner,
		})
	}
	if dgu.mutation.BannerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: discordguild.FieldBanner,
		})
	}
	if value, ok := dgu.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldPermissions,
		})
	}
	if value, ok := dgu.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discordguild.FieldJoinedAt,
		})
	}
	if dgu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !dgu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordguild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DiscordGuildUpdateOne is the builder for updating a single DiscordGuild entity.
type DiscordGuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordGuildMutation
}

// SetDiscordID sets the "discord_id" field.
func (dguo *DiscordGuildUpdateOne) SetDiscordID(s string) *DiscordGuildUpdateOne {
	dguo.mutation.SetDiscordID(s)
	return dguo
}

// SetName sets the "name" field.
func (dguo *DiscordGuildUpdateOne) SetName(s string) *DiscordGuildUpdateOne {
	dguo.mutation.SetName(s)
	return dguo
}

// SetDescription sets the "description" field.
func (dguo *DiscordGuildUpdateOne) SetDescription(s string) *DiscordGuildUpdateOne {
	dguo.mutation.SetDescription(s)
	return dguo
}

// SetIcon sets the "icon" field.
func (dguo *DiscordGuildUpdateOne) SetIcon(s string) *DiscordGuildUpdateOne {
	dguo.mutation.SetIcon(s)
	return dguo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (dguo *DiscordGuildUpdateOne) SetNillableIcon(s *string) *DiscordGuildUpdateOne {
	if s != nil {
		dguo.SetIcon(*s)
	}
	return dguo
}

// ClearIcon clears the value of the "icon" field.
func (dguo *DiscordGuildUpdateOne) ClearIcon() *DiscordGuildUpdateOne {
	dguo.mutation.ClearIcon()
	return dguo
}

// SetBanner sets the "banner" field.
func (dguo *DiscordGuildUpdateOne) SetBanner(s string) *DiscordGuildUpdateOne {
	dguo.mutation.SetBanner(s)
	return dguo
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (dguo *DiscordGuildUpdateOne) SetNillableBanner(s *string) *DiscordGuildUpdateOne {
	if s != nil {
		dguo.SetBanner(*s)
	}
	return dguo
}

// ClearBanner clears the value of the "banner" field.
func (dguo *DiscordGuildUpdateOne) ClearBanner() *DiscordGuildUpdateOne {
	dguo.mutation.ClearBanner()
	return dguo
}

// SetPermissions sets the "permissions" field.
func (dguo *DiscordGuildUpdateOne) SetPermissions(s string) *DiscordGuildUpdateOne {
	dguo.mutation.SetPermissions(s)
	return dguo
}

// SetJoinedAt sets the "joined_at" field.
func (dguo *DiscordGuildUpdateOne) SetJoinedAt(t time.Time) *DiscordGuildUpdateOne {
	dguo.mutation.SetJoinedAt(t)
	return dguo
}

// AddRoleIDs adds the "roles" edge to the DiscordRole entity by IDs.
func (dguo *DiscordGuildUpdateOne) AddRoleIDs(ids ...int) *DiscordGuildUpdateOne {
	dguo.mutation.AddRoleIDs(ids...)
	return dguo
}

// AddRoles adds the "roles" edges to the DiscordRole entity.
func (dguo *DiscordGuildUpdateOne) AddRoles(d ...*DiscordRole) *DiscordGuildUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.AddRoleIDs(ids...)
}

// Mutation returns the DiscordGuildMutation object of the builder.
func (dguo *DiscordGuildUpdateOne) Mutation() *DiscordGuildMutation {
	return dguo.mutation
}

// ClearRoles clears all "roles" edges to the DiscordRole entity.
func (dguo *DiscordGuildUpdateOne) ClearRoles() *DiscordGuildUpdateOne {
	dguo.mutation.ClearRoles()
	return dguo
}

// RemoveRoleIDs removes the "roles" edge to DiscordRole entities by IDs.
func (dguo *DiscordGuildUpdateOne) RemoveRoleIDs(ids ...int) *DiscordGuildUpdateOne {
	dguo.mutation.RemoveRoleIDs(ids...)
	return dguo
}

// RemoveRoles removes "roles" edges to DiscordRole entities.
func (dguo *DiscordGuildUpdateOne) RemoveRoles(d ...*DiscordRole) *DiscordGuildUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.RemoveRoleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dguo *DiscordGuildUpdateOne) Select(field string, fields ...string) *DiscordGuildUpdateOne {
	dguo.fields = append([]string{field}, fields...)
	return dguo
}

// Save executes the query and returns the updated DiscordGuild entity.
func (dguo *DiscordGuildUpdateOne) Save(ctx context.Context) (*DiscordGuild, error) {
	var (
		err  error
		node *DiscordGuild
	)
	if len(dguo.hooks) == 0 {
		node, err = dguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordGuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dguo.mutation = mutation
			node, err = dguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dguo.hooks) - 1; i >= 0; i-- {
			if dguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dguo *DiscordGuildUpdateOne) SaveX(ctx context.Context) *DiscordGuild {
	node, err := dguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dguo *DiscordGuildUpdateOne) Exec(ctx context.Context) error {
	_, err := dguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dguo *DiscordGuildUpdateOne) ExecX(ctx context.Context) {
	if err := dguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dguo *DiscordGuildUpdateOne) sqlSave(ctx context.Context) (_node *DiscordGuild, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordguild.Table,
			Columns: discordguild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordguild.FieldID,
			},
		},
	}
	id, ok := dguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscordGuild.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordguild.FieldID)
		for _, f := range fields {
			if !discordguild.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordguild.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dguo.mutation.DiscordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldDiscordID,
		})
	}
	if value, ok := dguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldName,
		})
	}
	if value, ok := dguo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldDescription,
		})
	}
	if value, ok := dguo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldIcon,
		})
	}
	if dguo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: discordguild.FieldIcon,
		})
	}
	if value, ok := dguo.mutation.Banner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldBanner,
		})
	}
	if dguo.mutation.BannerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: discordguild.FieldBanner,
		})
	}
	if value, ok := dguo.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldPermissions,
		})
	}
	if value, ok := dguo.mutation.JoinedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discordguild.FieldJoinedAt,
		})
	}
	if dguo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !dguo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordGuild{config: dguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordguild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
