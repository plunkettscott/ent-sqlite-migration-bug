// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/bug/internal/ent/discordguild"
	"entgo.io/bug/internal/ent/discordrole"
	"entgo.io/bug/internal/ent/predicate"
	"entgo.io/bug/internal/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDiscordGuild = "DiscordGuild"
	TypeDiscordRole  = "DiscordRole"
	TypeUser         = "User"
)

// DiscordGuildMutation represents an operation that mutates the DiscordGuild nodes in the graph.
type DiscordGuildMutation struct {
	config
	op            Op
	typ           string
	id            *int
	discord_id    *string
	name          *string
	description   *string
	icon          *string
	banner        *string
	permissions   *string
	joined_at     *time.Time
	clearedFields map[string]struct{}
	roles         map[int]struct{}
	removedroles  map[int]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*DiscordGuild, error)
	predicates    []predicate.DiscordGuild
}

var _ ent.Mutation = (*DiscordGuildMutation)(nil)

// discordguildOption allows management of the mutation configuration using functional options.
type discordguildOption func(*DiscordGuildMutation)

// newDiscordGuildMutation creates new mutation for the DiscordGuild entity.
func newDiscordGuildMutation(c config, op Op, opts ...discordguildOption) *DiscordGuildMutation {
	m := &DiscordGuildMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordGuild,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordGuildID sets the ID field of the mutation.
func withDiscordGuildID(id int) discordguildOption {
	return func(m *DiscordGuildMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordGuild
		)
		m.oldValue = func(ctx context.Context) (*DiscordGuild, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordGuild.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordGuild sets the old DiscordGuild of the mutation.
func withDiscordGuild(node *DiscordGuild) discordguildOption {
	return func(m *DiscordGuildMutation) {
		m.oldValue = func(context.Context) (*DiscordGuild, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordGuildMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordGuildMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordGuildMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordGuildMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordGuild.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDiscordID sets the "discord_id" field.
func (m *DiscordGuildMutation) SetDiscordID(s string) {
	m.discord_id = &s
}

// DiscordID returns the value of the "discord_id" field in the mutation.
func (m *DiscordGuildMutation) DiscordID() (r string, exists bool) {
	v := m.discord_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscordID returns the old "discord_id" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldDiscordID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscordID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscordID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscordID: %w", err)
	}
	return oldValue.DiscordID, nil
}

// ResetDiscordID resets all changes to the "discord_id" field.
func (m *DiscordGuildMutation) ResetDiscordID() {
	m.discord_id = nil
}

// SetName sets the "name" field.
func (m *DiscordGuildMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscordGuildMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscordGuildMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *DiscordGuildMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DiscordGuildMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *DiscordGuildMutation) ResetDescription() {
	m.description = nil
}

// SetIcon sets the "icon" field.
func (m *DiscordGuildMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *DiscordGuildMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *DiscordGuildMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[discordguild.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *DiscordGuildMutation) IconCleared() bool {
	_, ok := m.clearedFields[discordguild.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *DiscordGuildMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, discordguild.FieldIcon)
}

// SetBanner sets the "banner" field.
func (m *DiscordGuildMutation) SetBanner(s string) {
	m.banner = &s
}

// Banner returns the value of the "banner" field in the mutation.
func (m *DiscordGuildMutation) Banner() (r string, exists bool) {
	v := m.banner
	if v == nil {
		return
	}
	return *v, true
}

// OldBanner returns the old "banner" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldBanner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBanner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBanner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBanner: %w", err)
	}
	return oldValue.Banner, nil
}

// ClearBanner clears the value of the "banner" field.
func (m *DiscordGuildMutation) ClearBanner() {
	m.banner = nil
	m.clearedFields[discordguild.FieldBanner] = struct{}{}
}

// BannerCleared returns if the "banner" field was cleared in this mutation.
func (m *DiscordGuildMutation) BannerCleared() bool {
	_, ok := m.clearedFields[discordguild.FieldBanner]
	return ok
}

// ResetBanner resets all changes to the "banner" field.
func (m *DiscordGuildMutation) ResetBanner() {
	m.banner = nil
	delete(m.clearedFields, discordguild.FieldBanner)
}

// SetPermissions sets the "permissions" field.
func (m *DiscordGuildMutation) SetPermissions(s string) {
	m.permissions = &s
}

// Permissions returns the value of the "permissions" field in the mutation.
func (m *DiscordGuildMutation) Permissions() (r string, exists bool) {
	v := m.permissions
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissions returns the old "permissions" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldPermissions(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissions: %w", err)
	}
	return oldValue.Permissions, nil
}

// ResetPermissions resets all changes to the "permissions" field.
func (m *DiscordGuildMutation) ResetPermissions() {
	m.permissions = nil
}

// SetJoinedAt sets the "joined_at" field.
func (m *DiscordGuildMutation) SetJoinedAt(t time.Time) {
	m.joined_at = &t
}

// JoinedAt returns the value of the "joined_at" field in the mutation.
func (m *DiscordGuildMutation) JoinedAt() (r time.Time, exists bool) {
	v := m.joined_at
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinedAt returns the old "joined_at" field's value of the DiscordGuild entity.
// If the DiscordGuild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordGuildMutation) OldJoinedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinedAt: %w", err)
	}
	return oldValue.JoinedAt, nil
}

// ResetJoinedAt resets all changes to the "joined_at" field.
func (m *DiscordGuildMutation) ResetJoinedAt() {
	m.joined_at = nil
}

// AddRoleIDs adds the "roles" edge to the DiscordRole entity by ids.
func (m *DiscordGuildMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the DiscordRole entity.
func (m *DiscordGuildMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the DiscordRole entity was cleared.
func (m *DiscordGuildMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the DiscordRole entity by IDs.
func (m *DiscordGuildMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the DiscordRole entity.
func (m *DiscordGuildMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *DiscordGuildMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *DiscordGuildMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the DiscordGuildMutation builder.
func (m *DiscordGuildMutation) Where(ps ...predicate.DiscordGuild) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DiscordGuildMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DiscordGuild).
func (m *DiscordGuildMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordGuildMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.discord_id != nil {
		fields = append(fields, discordguild.FieldDiscordID)
	}
	if m.name != nil {
		fields = append(fields, discordguild.FieldName)
	}
	if m.description != nil {
		fields = append(fields, discordguild.FieldDescription)
	}
	if m.icon != nil {
		fields = append(fields, discordguild.FieldIcon)
	}
	if m.banner != nil {
		fields = append(fields, discordguild.FieldBanner)
	}
	if m.permissions != nil {
		fields = append(fields, discordguild.FieldPermissions)
	}
	if m.joined_at != nil {
		fields = append(fields, discordguild.FieldJoinedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordGuildMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discordguild.FieldDiscordID:
		return m.DiscordID()
	case discordguild.FieldName:
		return m.Name()
	case discordguild.FieldDescription:
		return m.Description()
	case discordguild.FieldIcon:
		return m.Icon()
	case discordguild.FieldBanner:
		return m.Banner()
	case discordguild.FieldPermissions:
		return m.Permissions()
	case discordguild.FieldJoinedAt:
		return m.JoinedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordGuildMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discordguild.FieldDiscordID:
		return m.OldDiscordID(ctx)
	case discordguild.FieldName:
		return m.OldName(ctx)
	case discordguild.FieldDescription:
		return m.OldDescription(ctx)
	case discordguild.FieldIcon:
		return m.OldIcon(ctx)
	case discordguild.FieldBanner:
		return m.OldBanner(ctx)
	case discordguild.FieldPermissions:
		return m.OldPermissions(ctx)
	case discordguild.FieldJoinedAt:
		return m.OldJoinedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordGuild field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordGuildMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discordguild.FieldDiscordID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscordID(v)
		return nil
	case discordguild.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case discordguild.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case discordguild.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case discordguild.FieldBanner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBanner(v)
		return nil
	case discordguild.FieldPermissions:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissions(v)
		return nil
	case discordguild.FieldJoinedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordGuild field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordGuildMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordGuildMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordGuildMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordGuild numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordGuildMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(discordguild.FieldIcon) {
		fields = append(fields, discordguild.FieldIcon)
	}
	if m.FieldCleared(discordguild.FieldBanner) {
		fields = append(fields, discordguild.FieldBanner)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordGuildMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordGuildMutation) ClearField(name string) error {
	switch name {
	case discordguild.FieldIcon:
		m.ClearIcon()
		return nil
	case discordguild.FieldBanner:
		m.ClearBanner()
		return nil
	}
	return fmt.Errorf("unknown DiscordGuild nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordGuildMutation) ResetField(name string) error {
	switch name {
	case discordguild.FieldDiscordID:
		m.ResetDiscordID()
		return nil
	case discordguild.FieldName:
		m.ResetName()
		return nil
	case discordguild.FieldDescription:
		m.ResetDescription()
		return nil
	case discordguild.FieldIcon:
		m.ResetIcon()
		return nil
	case discordguild.FieldBanner:
		m.ResetBanner()
		return nil
	case discordguild.FieldPermissions:
		m.ResetPermissions()
		return nil
	case discordguild.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	}
	return fmt.Errorf("unknown DiscordGuild field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordGuildMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, discordguild.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordGuildMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discordguild.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordGuildMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, discordguild.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordGuildMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discordguild.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordGuildMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, discordguild.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordGuildMutation) EdgeCleared(name string) bool {
	switch name {
	case discordguild.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordGuildMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordGuild unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordGuildMutation) ResetEdge(name string) error {
	switch name {
	case discordguild.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown DiscordGuild edge %s", name)
}

// DiscordRoleMutation represents an operation that mutates the DiscordRole nodes in the graph.
type DiscordRoleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	discord_id    *string
	name          *string
	color         *string
	managed       *bool
	clearedFields map[string]struct{}
	guild         *int
	clearedguild  bool
	done          bool
	oldValue      func(context.Context) (*DiscordRole, error)
	predicates    []predicate.DiscordRole
}

var _ ent.Mutation = (*DiscordRoleMutation)(nil)

// discordroleOption allows management of the mutation configuration using functional options.
type discordroleOption func(*DiscordRoleMutation)

// newDiscordRoleMutation creates new mutation for the DiscordRole entity.
func newDiscordRoleMutation(c config, op Op, opts ...discordroleOption) *DiscordRoleMutation {
	m := &DiscordRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscordRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscordRoleID sets the ID field of the mutation.
func withDiscordRoleID(id int) discordroleOption {
	return func(m *DiscordRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscordRole
		)
		m.oldValue = func(ctx context.Context) (*DiscordRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscordRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscordRole sets the old DiscordRole of the mutation.
func withDiscordRole(node *DiscordRole) discordroleOption {
	return func(m *DiscordRoleMutation) {
		m.oldValue = func(context.Context) (*DiscordRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscordRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscordRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscordRoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscordRoleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscordRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDiscordID sets the "discord_id" field.
func (m *DiscordRoleMutation) SetDiscordID(s string) {
	m.discord_id = &s
}

// DiscordID returns the value of the "discord_id" field in the mutation.
func (m *DiscordRoleMutation) DiscordID() (r string, exists bool) {
	v := m.discord_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscordID returns the old "discord_id" field's value of the DiscordRole entity.
// If the DiscordRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordRoleMutation) OldDiscordID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscordID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscordID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscordID: %w", err)
	}
	return oldValue.DiscordID, nil
}

// ResetDiscordID resets all changes to the "discord_id" field.
func (m *DiscordRoleMutation) ResetDiscordID() {
	m.discord_id = nil
}

// SetName sets the "name" field.
func (m *DiscordRoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscordRoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscordRole entity.
// If the DiscordRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordRoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscordRoleMutation) ResetName() {
	m.name = nil
}

// SetColor sets the "color" field.
func (m *DiscordRoleMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *DiscordRoleMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the DiscordRole entity.
// If the DiscordRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordRoleMutation) OldColor(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ClearColor clears the value of the "color" field.
func (m *DiscordRoleMutation) ClearColor() {
	m.color = nil
	m.clearedFields[discordrole.FieldColor] = struct{}{}
}

// ColorCleared returns if the "color" field was cleared in this mutation.
func (m *DiscordRoleMutation) ColorCleared() bool {
	_, ok := m.clearedFields[discordrole.FieldColor]
	return ok
}

// ResetColor resets all changes to the "color" field.
func (m *DiscordRoleMutation) ResetColor() {
	m.color = nil
	delete(m.clearedFields, discordrole.FieldColor)
}

// SetManaged sets the "managed" field.
func (m *DiscordRoleMutation) SetManaged(b bool) {
	m.managed = &b
}

// Managed returns the value of the "managed" field in the mutation.
func (m *DiscordRoleMutation) Managed() (r bool, exists bool) {
	v := m.managed
	if v == nil {
		return
	}
	return *v, true
}

// OldManaged returns the old "managed" field's value of the DiscordRole entity.
// If the DiscordRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscordRoleMutation) OldManaged(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManaged is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManaged requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManaged: %w", err)
	}
	return oldValue.Managed, nil
}

// ResetManaged resets all changes to the "managed" field.
func (m *DiscordRoleMutation) ResetManaged() {
	m.managed = nil
}

// SetGuildID sets the "guild" edge to the DiscordGuild entity by id.
func (m *DiscordRoleMutation) SetGuildID(id int) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the DiscordGuild entity.
func (m *DiscordRoleMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared reports if the "guild" edge to the DiscordGuild entity was cleared.
func (m *DiscordRoleMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *DiscordRoleMutation) GuildID() (id int, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *DiscordRoleMutation) GuildIDs() (ids []int) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *DiscordRoleMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// Where appends a list predicates to the DiscordRoleMutation builder.
func (m *DiscordRoleMutation) Where(ps ...predicate.DiscordRole) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DiscordRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DiscordRole).
func (m *DiscordRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscordRoleMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.discord_id != nil {
		fields = append(fields, discordrole.FieldDiscordID)
	}
	if m.name != nil {
		fields = append(fields, discordrole.FieldName)
	}
	if m.color != nil {
		fields = append(fields, discordrole.FieldColor)
	}
	if m.managed != nil {
		fields = append(fields, discordrole.FieldManaged)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscordRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discordrole.FieldDiscordID:
		return m.DiscordID()
	case discordrole.FieldName:
		return m.Name()
	case discordrole.FieldColor:
		return m.Color()
	case discordrole.FieldManaged:
		return m.Managed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscordRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discordrole.FieldDiscordID:
		return m.OldDiscordID(ctx)
	case discordrole.FieldName:
		return m.OldName(ctx)
	case discordrole.FieldColor:
		return m.OldColor(ctx)
	case discordrole.FieldManaged:
		return m.OldManaged(ctx)
	}
	return nil, fmt.Errorf("unknown DiscordRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discordrole.FieldDiscordID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscordID(v)
		return nil
	case discordrole.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case discordrole.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case discordrole.FieldManaged:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManaged(v)
		return nil
	}
	return fmt.Errorf("unknown DiscordRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscordRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscordRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscordRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscordRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscordRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(discordrole.FieldColor) {
		fields = append(fields, discordrole.FieldColor)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscordRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscordRoleMutation) ClearField(name string) error {
	switch name {
	case discordrole.FieldColor:
		m.ClearColor()
		return nil
	}
	return fmt.Errorf("unknown DiscordRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscordRoleMutation) ResetField(name string) error {
	switch name {
	case discordrole.FieldDiscordID:
		m.ResetDiscordID()
		return nil
	case discordrole.FieldName:
		m.ResetName()
		return nil
	case discordrole.FieldColor:
		m.ResetColor()
		return nil
	case discordrole.FieldManaged:
		m.ResetManaged()
		return nil
	}
	return fmt.Errorf("unknown DiscordRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscordRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.guild != nil {
		edges = append(edges, discordrole.EdgeGuild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscordRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discordrole.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscordRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscordRoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscordRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedguild {
		edges = append(edges, discordrole.EdgeGuild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscordRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case discordrole.EdgeGuild:
		return m.clearedguild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscordRoleMutation) ClearEdge(name string) error {
	switch name {
	case discordrole.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown DiscordRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscordRoleMutation) ResetEdge(name string) error {
	switch name {
	case discordrole.EdgeGuild:
		m.ResetGuild()
		return nil
	}
	return fmt.Errorf("unknown DiscordRole edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	age           *int
	addage        *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
