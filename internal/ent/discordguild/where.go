// Code generated by entc, DO NOT EDIT.

package discordguild

import (
	"time"

	"entgo.io/bug/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DiscordID applies equality check predicate on the "discord_id" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// Banner applies equality check predicate on the "banner" field. It's identical to BannerEQ.
func Banner(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// Permissions applies equality check predicate on the "permissions" field. It's identical to PermissionsEQ.
func Permissions(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissions), v))
	})
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedAt), v))
	})
}

// DiscordIDEQ applies the EQ predicate on the "discord_id" field.
func DiscordIDEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDNEQ applies the NEQ predicate on the "discord_id" field.
func DiscordIDNEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDIn applies the In predicate on the "discord_id" field.
func DiscordIDIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDNotIn applies the NotIn predicate on the "discord_id" field.
func DiscordIDNotIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDGT applies the GT predicate on the "discord_id" field.
func DiscordIDGT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDGTE applies the GTE predicate on the "discord_id" field.
func DiscordIDGTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLT applies the LT predicate on the "discord_id" field.
func DiscordIDLT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLTE applies the LTE predicate on the "discord_id" field.
func DiscordIDLTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContains applies the Contains predicate on the "discord_id" field.
func DiscordIDContains(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "discord_id" field.
func DiscordIDHasPrefix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "discord_id" field.
func DiscordIDHasSuffix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDEqualFold applies the EqualFold predicate on the "discord_id" field.
func DiscordIDEqualFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "discord_id" field.
func DiscordIDContainsFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIcon)))
	})
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIcon)))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// BannerEQ applies the EQ predicate on the "banner" field.
func BannerEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// BannerNEQ applies the NEQ predicate on the "banner" field.
func BannerNEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBanner), v))
	})
}

// BannerIn applies the In predicate on the "banner" field.
func BannerIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBanner), v...))
	})
}

// BannerNotIn applies the NotIn predicate on the "banner" field.
func BannerNotIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBanner), v...))
	})
}

// BannerGT applies the GT predicate on the "banner" field.
func BannerGT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBanner), v))
	})
}

// BannerGTE applies the GTE predicate on the "banner" field.
func BannerGTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBanner), v))
	})
}

// BannerLT applies the LT predicate on the "banner" field.
func BannerLT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBanner), v))
	})
}

// BannerLTE applies the LTE predicate on the "banner" field.
func BannerLTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBanner), v))
	})
}

// BannerContains applies the Contains predicate on the "banner" field.
func BannerContains(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBanner), v))
	})
}

// BannerHasPrefix applies the HasPrefix predicate on the "banner" field.
func BannerHasPrefix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBanner), v))
	})
}

// BannerHasSuffix applies the HasSuffix predicate on the "banner" field.
func BannerHasSuffix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBanner), v))
	})
}

// BannerIsNil applies the IsNil predicate on the "banner" field.
func BannerIsNil() predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBanner)))
	})
}

// BannerNotNil applies the NotNil predicate on the "banner" field.
func BannerNotNil() predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBanner)))
	})
}

// BannerEqualFold applies the EqualFold predicate on the "banner" field.
func BannerEqualFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBanner), v))
	})
}

// BannerContainsFold applies the ContainsFold predicate on the "banner" field.
func BannerContainsFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBanner), v))
	})
}

// PermissionsEQ applies the EQ predicate on the "permissions" field.
func PermissionsEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissions), v))
	})
}

// PermissionsNEQ applies the NEQ predicate on the "permissions" field.
func PermissionsNEQ(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermissions), v))
	})
}

// PermissionsIn applies the In predicate on the "permissions" field.
func PermissionsIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPermissions), v...))
	})
}

// PermissionsNotIn applies the NotIn predicate on the "permissions" field.
func PermissionsNotIn(vs ...string) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPermissions), v...))
	})
}

// PermissionsGT applies the GT predicate on the "permissions" field.
func PermissionsGT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPermissions), v))
	})
}

// PermissionsGTE applies the GTE predicate on the "permissions" field.
func PermissionsGTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPermissions), v))
	})
}

// PermissionsLT applies the LT predicate on the "permissions" field.
func PermissionsLT(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPermissions), v))
	})
}

// PermissionsLTE applies the LTE predicate on the "permissions" field.
func PermissionsLTE(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPermissions), v))
	})
}

// PermissionsContains applies the Contains predicate on the "permissions" field.
func PermissionsContains(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPermissions), v))
	})
}

// PermissionsHasPrefix applies the HasPrefix predicate on the "permissions" field.
func PermissionsHasPrefix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPermissions), v))
	})
}

// PermissionsHasSuffix applies the HasSuffix predicate on the "permissions" field.
func PermissionsHasSuffix(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPermissions), v))
	})
}

// PermissionsEqualFold applies the EqualFold predicate on the "permissions" field.
func PermissionsEqualFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPermissions), v))
	})
}

// PermissionsContainsFold applies the ContainsFold predicate on the "permissions" field.
func PermissionsContainsFold(v string) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPermissions), v))
	})
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...time.Time) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJoinedAt), v...))
	})
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...time.Time) predicate.DiscordGuild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DiscordGuild(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJoinedAt), v...))
	})
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v time.Time) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinedAt), v))
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.DiscordRole) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiscordGuild) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiscordGuild) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiscordGuild) predicate.DiscordGuild {
	return predicate.DiscordGuild(func(s *sql.Selector) {
		p(s.Not())
	})
}
