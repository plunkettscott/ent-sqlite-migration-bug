// Code generated by entc, DO NOT EDIT.

package discordrole

const (
	// Label holds the string label denoting the discordrole type in the database.
	Label = "discord_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDiscordID holds the string denoting the discord_id field in the database.
	FieldDiscordID = "discord_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldManaged holds the string denoting the managed field in the database.
	FieldManaged = "managed"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// Table holds the table name of the discordrole in the database.
	Table = "discord_roles"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "discord_roles"
	// GuildInverseTable is the table name for the DiscordGuild entity.
	// It exists in this package in order to avoid circular dependency with the "discordguild" package.
	GuildInverseTable = "discord_guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "discord_guild_roles"
)

// Columns holds all SQL columns for discordrole fields.
var Columns = []string{
	FieldID,
	FieldDiscordID,
	FieldName,
	FieldColor,
	FieldManaged,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "discord_roles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"discord_guild_roles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultManaged holds the default value on creation for the "managed" field.
	DefaultManaged bool
)
