// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/internal/ent/discordguild"
	"entgo.io/bug/internal/ent/discordrole"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscordGuildCreate is the builder for creating a DiscordGuild entity.
type DiscordGuildCreate struct {
	config
	mutation *DiscordGuildMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDiscordID sets the "discord_id" field.
func (dgc *DiscordGuildCreate) SetDiscordID(s string) *DiscordGuildCreate {
	dgc.mutation.SetDiscordID(s)
	return dgc
}

// SetName sets the "name" field.
func (dgc *DiscordGuildCreate) SetName(s string) *DiscordGuildCreate {
	dgc.mutation.SetName(s)
	return dgc
}

// SetDescription sets the "description" field.
func (dgc *DiscordGuildCreate) SetDescription(s string) *DiscordGuildCreate {
	dgc.mutation.SetDescription(s)
	return dgc
}

// SetIcon sets the "icon" field.
func (dgc *DiscordGuildCreate) SetIcon(s string) *DiscordGuildCreate {
	dgc.mutation.SetIcon(s)
	return dgc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (dgc *DiscordGuildCreate) SetNillableIcon(s *string) *DiscordGuildCreate {
	if s != nil {
		dgc.SetIcon(*s)
	}
	return dgc
}

// SetBanner sets the "banner" field.
func (dgc *DiscordGuildCreate) SetBanner(s string) *DiscordGuildCreate {
	dgc.mutation.SetBanner(s)
	return dgc
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (dgc *DiscordGuildCreate) SetNillableBanner(s *string) *DiscordGuildCreate {
	if s != nil {
		dgc.SetBanner(*s)
	}
	return dgc
}

// SetPermissions sets the "permissions" field.
func (dgc *DiscordGuildCreate) SetPermissions(s string) *DiscordGuildCreate {
	dgc.mutation.SetPermissions(s)
	return dgc
}

// SetJoinedAt sets the "joined_at" field.
func (dgc *DiscordGuildCreate) SetJoinedAt(t time.Time) *DiscordGuildCreate {
	dgc.mutation.SetJoinedAt(t)
	return dgc
}

// AddRoleIDs adds the "roles" edge to the DiscordRole entity by IDs.
func (dgc *DiscordGuildCreate) AddRoleIDs(ids ...int) *DiscordGuildCreate {
	dgc.mutation.AddRoleIDs(ids...)
	return dgc
}

// AddRoles adds the "roles" edges to the DiscordRole entity.
func (dgc *DiscordGuildCreate) AddRoles(d ...*DiscordRole) *DiscordGuildCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgc.AddRoleIDs(ids...)
}

// Mutation returns the DiscordGuildMutation object of the builder.
func (dgc *DiscordGuildCreate) Mutation() *DiscordGuildMutation {
	return dgc.mutation
}

// Save creates the DiscordGuild in the database.
func (dgc *DiscordGuildCreate) Save(ctx context.Context) (*DiscordGuild, error) {
	var (
		err  error
		node *DiscordGuild
	)
	if len(dgc.hooks) == 0 {
		if err = dgc.check(); err != nil {
			return nil, err
		}
		node, err = dgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordGuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dgc.check(); err != nil {
				return nil, err
			}
			dgc.mutation = mutation
			if node, err = dgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dgc.hooks) - 1; i >= 0; i-- {
			if dgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dgc *DiscordGuildCreate) SaveX(ctx context.Context) *DiscordGuild {
	v, err := dgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dgc *DiscordGuildCreate) Exec(ctx context.Context) error {
	_, err := dgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgc *DiscordGuildCreate) ExecX(ctx context.Context) {
	if err := dgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dgc *DiscordGuildCreate) check() error {
	if _, ok := dgc.mutation.DiscordID(); !ok {
		return &ValidationError{Name: "discord_id", err: errors.New(`ent: missing required field "DiscordGuild.discord_id"`)}
	}
	if _, ok := dgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DiscordGuild.name"`)}
	}
	if _, ok := dgc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "DiscordGuild.description"`)}
	}
	if _, ok := dgc.mutation.Permissions(); !ok {
		return &ValidationError{Name: "permissions", err: errors.New(`ent: missing required field "DiscordGuild.permissions"`)}
	}
	if _, ok := dgc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "DiscordGuild.joined_at"`)}
	}
	return nil
}

func (dgc *DiscordGuildCreate) sqlSave(ctx context.Context) (*DiscordGuild, error) {
	_node, _spec := dgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dgc *DiscordGuildCreate) createSpec() (*DiscordGuild, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscordGuild{config: dgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: discordguild.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordguild.FieldID,
			},
		}
	)
	_spec.OnConflict = dgc.conflict
	if value, ok := dgc.mutation.DiscordID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldDiscordID,
		})
		_node.DiscordID = value
	}
	if value, ok := dgc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dgc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := dgc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := dgc.mutation.Banner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldBanner,
		})
		_node.Banner = value
	}
	if value, ok := dgc.mutation.Permissions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordguild.FieldPermissions,
		})
		_node.Permissions = value
	}
	if value, ok := dgc.mutation.JoinedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: discordguild.FieldJoinedAt,
		})
		_node.JoinedAt = value
	}
	if nodes := dgc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DiscordGuild.Create().
//		SetDiscordID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DiscordGuildUpsert) {
//			SetDiscordID(v+v).
//		}).
//		Exec(ctx)
//
func (dgc *DiscordGuildCreate) OnConflict(opts ...sql.ConflictOption) *DiscordGuildUpsertOne {
	dgc.conflict = opts
	return &DiscordGuildUpsertOne{
		create: dgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DiscordGuild.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dgc *DiscordGuildCreate) OnConflictColumns(columns ...string) *DiscordGuildUpsertOne {
	dgc.conflict = append(dgc.conflict, sql.ConflictColumns(columns...))
	return &DiscordGuildUpsertOne{
		create: dgc,
	}
}

type (
	// DiscordGuildUpsertOne is the builder for "upsert"-ing
	//  one DiscordGuild node.
	DiscordGuildUpsertOne struct {
		create *DiscordGuildCreate
	}

	// DiscordGuildUpsert is the "OnConflict" setter.
	DiscordGuildUpsert struct {
		*sql.UpdateSet
	}
)

// SetDiscordID sets the "discord_id" field.
func (u *DiscordGuildUpsert) SetDiscordID(v string) *DiscordGuildUpsert {
	u.Set(discordguild.FieldDiscordID, v)
	return u
}

// UpdateDiscordID sets the "discord_id" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdateDiscordID() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldDiscordID)
	return u
}

// SetName sets the "name" field.
func (u *DiscordGuildUpsert) SetName(v string) *DiscordGuildUpsert {
	u.Set(discordguild.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdateName() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *DiscordGuildUpsert) SetDescription(v string) *DiscordGuildUpsert {
	u.Set(discordguild.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdateDescription() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldDescription)
	return u
}

// SetIcon sets the "icon" field.
func (u *DiscordGuildUpsert) SetIcon(v string) *DiscordGuildUpsert {
	u.Set(discordguild.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdateIcon() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *DiscordGuildUpsert) ClearIcon() *DiscordGuildUpsert {
	u.SetNull(discordguild.FieldIcon)
	return u
}

// SetBanner sets the "banner" field.
func (u *DiscordGuildUpsert) SetBanner(v string) *DiscordGuildUpsert {
	u.Set(discordguild.FieldBanner, v)
	return u
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdateBanner() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldBanner)
	return u
}

// ClearBanner clears the value of the "banner" field.
func (u *DiscordGuildUpsert) ClearBanner() *DiscordGuildUpsert {
	u.SetNull(discordguild.FieldBanner)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *DiscordGuildUpsert) SetPermissions(v string) *DiscordGuildUpsert {
	u.Set(discordguild.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdatePermissions() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldPermissions)
	return u
}

// SetJoinedAt sets the "joined_at" field.
func (u *DiscordGuildUpsert) SetJoinedAt(v time.Time) *DiscordGuildUpsert {
	u.Set(discordguild.FieldJoinedAt, v)
	return u
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *DiscordGuildUpsert) UpdateJoinedAt() *DiscordGuildUpsert {
	u.SetExcluded(discordguild.FieldJoinedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DiscordGuild.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *DiscordGuildUpsertOne) UpdateNewValues() *DiscordGuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DiscordGuild.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DiscordGuildUpsertOne) Ignore() *DiscordGuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscordGuildUpsertOne) DoNothing() *DiscordGuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscordGuildCreate.OnConflict
// documentation for more info.
func (u *DiscordGuildUpsertOne) Update(set func(*DiscordGuildUpsert)) *DiscordGuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscordGuildUpsert{UpdateSet: update})
	}))
	return u
}

// SetDiscordID sets the "discord_id" field.
func (u *DiscordGuildUpsertOne) SetDiscordID(v string) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetDiscordID(v)
	})
}

// UpdateDiscordID sets the "discord_id" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdateDiscordID() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateDiscordID()
	})
}

// SetName sets the "name" field.
func (u *DiscordGuildUpsertOne) SetName(v string) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdateName() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *DiscordGuildUpsertOne) SetDescription(v string) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdateDescription() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateDescription()
	})
}

// SetIcon sets the "icon" field.
func (u *DiscordGuildUpsertOne) SetIcon(v string) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdateIcon() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *DiscordGuildUpsertOne) ClearIcon() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.ClearIcon()
	})
}

// SetBanner sets the "banner" field.
func (u *DiscordGuildUpsertOne) SetBanner(v string) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdateBanner() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *DiscordGuildUpsertOne) ClearBanner() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.ClearBanner()
	})
}

// SetPermissions sets the "permissions" field.
func (u *DiscordGuildUpsertOne) SetPermissions(v string) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdatePermissions() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdatePermissions()
	})
}

// SetJoinedAt sets the "joined_at" field.
func (u *DiscordGuildUpsertOne) SetJoinedAt(v time.Time) *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetJoinedAt(v)
	})
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *DiscordGuildUpsertOne) UpdateJoinedAt() *DiscordGuildUpsertOne {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateJoinedAt()
	})
}

// Exec executes the query.
func (u *DiscordGuildUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscordGuildCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscordGuildUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DiscordGuildUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DiscordGuildUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DiscordGuildCreateBulk is the builder for creating many DiscordGuild entities in bulk.
type DiscordGuildCreateBulk struct {
	config
	builders []*DiscordGuildCreate
	conflict []sql.ConflictOption
}

// Save creates the DiscordGuild entities in the database.
func (dgcb *DiscordGuildCreateBulk) Save(ctx context.Context) ([]*DiscordGuild, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dgcb.builders))
	nodes := make([]*DiscordGuild, len(dgcb.builders))
	mutators := make([]Mutator, len(dgcb.builders))
	for i := range dgcb.builders {
		func(i int, root context.Context) {
			builder := dgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscordGuildMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dgcb *DiscordGuildCreateBulk) SaveX(ctx context.Context) []*DiscordGuild {
	v, err := dgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dgcb *DiscordGuildCreateBulk) Exec(ctx context.Context) error {
	_, err := dgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgcb *DiscordGuildCreateBulk) ExecX(ctx context.Context) {
	if err := dgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DiscordGuild.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DiscordGuildUpsert) {
//			SetDiscordID(v+v).
//		}).
//		Exec(ctx)
//
func (dgcb *DiscordGuildCreateBulk) OnConflict(opts ...sql.ConflictOption) *DiscordGuildUpsertBulk {
	dgcb.conflict = opts
	return &DiscordGuildUpsertBulk{
		create: dgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DiscordGuild.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dgcb *DiscordGuildCreateBulk) OnConflictColumns(columns ...string) *DiscordGuildUpsertBulk {
	dgcb.conflict = append(dgcb.conflict, sql.ConflictColumns(columns...))
	return &DiscordGuildUpsertBulk{
		create: dgcb,
	}
}

// DiscordGuildUpsertBulk is the builder for "upsert"-ing
// a bulk of DiscordGuild nodes.
type DiscordGuildUpsertBulk struct {
	create *DiscordGuildCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DiscordGuild.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *DiscordGuildUpsertBulk) UpdateNewValues() *DiscordGuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DiscordGuild.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DiscordGuildUpsertBulk) Ignore() *DiscordGuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DiscordGuildUpsertBulk) DoNothing() *DiscordGuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DiscordGuildCreateBulk.OnConflict
// documentation for more info.
func (u *DiscordGuildUpsertBulk) Update(set func(*DiscordGuildUpsert)) *DiscordGuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DiscordGuildUpsert{UpdateSet: update})
	}))
	return u
}

// SetDiscordID sets the "discord_id" field.
func (u *DiscordGuildUpsertBulk) SetDiscordID(v string) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetDiscordID(v)
	})
}

// UpdateDiscordID sets the "discord_id" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdateDiscordID() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateDiscordID()
	})
}

// SetName sets the "name" field.
func (u *DiscordGuildUpsertBulk) SetName(v string) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdateName() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *DiscordGuildUpsertBulk) SetDescription(v string) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdateDescription() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateDescription()
	})
}

// SetIcon sets the "icon" field.
func (u *DiscordGuildUpsertBulk) SetIcon(v string) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdateIcon() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *DiscordGuildUpsertBulk) ClearIcon() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.ClearIcon()
	})
}

// SetBanner sets the "banner" field.
func (u *DiscordGuildUpsertBulk) SetBanner(v string) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdateBanner() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *DiscordGuildUpsertBulk) ClearBanner() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.ClearBanner()
	})
}

// SetPermissions sets the "permissions" field.
func (u *DiscordGuildUpsertBulk) SetPermissions(v string) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdatePermissions() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdatePermissions()
	})
}

// SetJoinedAt sets the "joined_at" field.
func (u *DiscordGuildUpsertBulk) SetJoinedAt(v time.Time) *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.SetJoinedAt(v)
	})
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *DiscordGuildUpsertBulk) UpdateJoinedAt() *DiscordGuildUpsertBulk {
	return u.Update(func(s *DiscordGuildUpsert) {
		s.UpdateJoinedAt()
	})
}

// Exec executes the query.
func (u *DiscordGuildUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DiscordGuildCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DiscordGuildCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DiscordGuildUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
