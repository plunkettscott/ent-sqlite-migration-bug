// Code generated by entc, DO NOT EDIT.

package ent

import (
	"entgo.io/bug/internal/ent/discordguild"
	"entgo.io/bug/internal/ent/discordrole"
	"entgo.io/bug/internal/ent/predicate"
	"entgo.io/bug/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   discordguild.Table,
			Columns: discordguild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordguild.FieldID,
			},
		},
		Type: "DiscordGuild",
		Fields: map[string]*sqlgraph.FieldSpec{
			discordguild.FieldDiscordID:   {Type: field.TypeString, Column: discordguild.FieldDiscordID},
			discordguild.FieldName:        {Type: field.TypeString, Column: discordguild.FieldName},
			discordguild.FieldDescription: {Type: field.TypeString, Column: discordguild.FieldDescription},
			discordguild.FieldIcon:        {Type: field.TypeString, Column: discordguild.FieldIcon},
			discordguild.FieldBanner:      {Type: field.TypeString, Column: discordguild.FieldBanner},
			discordguild.FieldPermissions: {Type: field.TypeString, Column: discordguild.FieldPermissions},
			discordguild.FieldJoinedAt:    {Type: field.TypeTime, Column: discordguild.FieldJoinedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   discordrole.Table,
			Columns: discordrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordrole.FieldID,
			},
		},
		Type: "DiscordRole",
		Fields: map[string]*sqlgraph.FieldSpec{
			discordrole.FieldDiscordID: {Type: field.TypeString, Column: discordrole.FieldDiscordID},
			discordrole.FieldName:      {Type: field.TypeString, Column: discordrole.FieldName},
			discordrole.FieldColor:     {Type: field.TypeString, Column: discordrole.FieldColor},
			discordrole.FieldManaged:   {Type: field.TypeBool, Column: discordrole.FieldManaged},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldAge:  {Type: field.TypeInt, Column: user.FieldAge},
			user.FieldName: {Type: field.TypeString, Column: user.FieldName},
		},
	}
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discordguild.RolesTable,
			Columns: []string{discordguild.RolesColumn},
			Bidi:    false,
		},
		"DiscordGuild",
		"DiscordRole",
	)
	graph.MustAddE(
		"guild",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordrole.GuildTable,
			Columns: []string{discordrole.GuildColumn},
			Bidi:    false,
		},
		"DiscordRole",
		"DiscordGuild",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dgq *DiscordGuildQuery) addPredicate(pred func(s *sql.Selector)) {
	dgq.predicates = append(dgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DiscordGuildQuery builder.
func (dgq *DiscordGuildQuery) Filter() *DiscordGuildFilter {
	return &DiscordGuildFilter{dgq}
}

// addPredicate implements the predicateAdder interface.
func (m *DiscordGuildMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DiscordGuildMutation builder.
func (m *DiscordGuildMutation) Filter() *DiscordGuildFilter {
	return &DiscordGuildFilter{m}
}

// DiscordGuildFilter provides a generic filtering capability at runtime for DiscordGuildQuery.
type DiscordGuildFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DiscordGuildFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DiscordGuildFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(discordguild.FieldID))
}

// WhereDiscordID applies the entql string predicate on the discord_id field.
func (f *DiscordGuildFilter) WhereDiscordID(p entql.StringP) {
	f.Where(p.Field(discordguild.FieldDiscordID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DiscordGuildFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(discordguild.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DiscordGuildFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(discordguild.FieldDescription))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *DiscordGuildFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(discordguild.FieldIcon))
}

// WhereBanner applies the entql string predicate on the banner field.
func (f *DiscordGuildFilter) WhereBanner(p entql.StringP) {
	f.Where(p.Field(discordguild.FieldBanner))
}

// WherePermissions applies the entql string predicate on the permissions field.
func (f *DiscordGuildFilter) WherePermissions(p entql.StringP) {
	f.Where(p.Field(discordguild.FieldPermissions))
}

// WhereJoinedAt applies the entql time.Time predicate on the joined_at field.
func (f *DiscordGuildFilter) WhereJoinedAt(p entql.TimeP) {
	f.Where(p.Field(discordguild.FieldJoinedAt))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *DiscordGuildFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *DiscordGuildFilter) WhereHasRolesWith(preds ...predicate.DiscordRole) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (drq *DiscordRoleQuery) addPredicate(pred func(s *sql.Selector)) {
	drq.predicates = append(drq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DiscordRoleQuery builder.
func (drq *DiscordRoleQuery) Filter() *DiscordRoleFilter {
	return &DiscordRoleFilter{drq}
}

// addPredicate implements the predicateAdder interface.
func (m *DiscordRoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DiscordRoleMutation builder.
func (m *DiscordRoleMutation) Filter() *DiscordRoleFilter {
	return &DiscordRoleFilter{m}
}

// DiscordRoleFilter provides a generic filtering capability at runtime for DiscordRoleQuery.
type DiscordRoleFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DiscordRoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DiscordRoleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(discordrole.FieldID))
}

// WhereDiscordID applies the entql string predicate on the discord_id field.
func (f *DiscordRoleFilter) WhereDiscordID(p entql.StringP) {
	f.Where(p.Field(discordrole.FieldDiscordID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DiscordRoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(discordrole.FieldName))
}

// WhereColor applies the entql string predicate on the color field.
func (f *DiscordRoleFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(discordrole.FieldColor))
}

// WhereManaged applies the entql bool predicate on the managed field.
func (f *DiscordRoleFilter) WhereManaged(p entql.BoolP) {
	f.Where(p.Field(discordrole.FieldManaged))
}

// WhereHasGuild applies a predicate to check if query has an edge guild.
func (f *DiscordRoleFilter) WhereHasGuild() {
	f.Where(entql.HasEdge("guild"))
}

// WhereHasGuildWith applies a predicate to check if query has an edge guild with a given conditions (other predicates).
func (f *DiscordRoleFilter) WhereHasGuildWith(preds ...predicate.DiscordGuild) {
	f.Where(entql.HasEdgeWith("guild", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereAge applies the entql int predicate on the age field.
func (f *UserFilter) WhereAge(p entql.IntP) {
	f.Where(p.Field(user.FieldAge))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}
