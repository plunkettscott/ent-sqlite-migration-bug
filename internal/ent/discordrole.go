// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/internal/ent/discordguild"
	"entgo.io/bug/internal/ent/discordrole"
	"entgo.io/ent/dialect/sql"
)

// DiscordRole is the model entity for the DiscordRole schema.
type DiscordRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DiscordID holds the value of the "discord_id" field.
	DiscordID string `json:"discord_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Color holds the value of the "color" field.
	Color *string `json:"color,omitempty"`
	// Managed holds the value of the "managed" field.
	Managed bool `json:"managed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordRoleQuery when eager-loading is set.
	Edges               DiscordRoleEdges `json:"edges"`
	discord_guild_roles *int
}

// DiscordRoleEdges holds the relations/edges for other nodes in the graph.
type DiscordRoleEdges struct {
	// Guild holds the value of the guild edge.
	Guild *DiscordGuild `json:"guild,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordRoleEdges) GuildOrErr() (*DiscordGuild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// The edge guild was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: discordguild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordrole.FieldManaged:
			values[i] = new(sql.NullBool)
		case discordrole.FieldID:
			values[i] = new(sql.NullInt64)
		case discordrole.FieldDiscordID, discordrole.FieldName, discordrole.FieldColor:
			values[i] = new(sql.NullString)
		case discordrole.ForeignKeys[0]: // discord_guild_roles
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DiscordRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordRole fields.
func (dr *DiscordRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = int(value.Int64)
		case discordrole.FieldDiscordID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discord_id", values[i])
			} else if value.Valid {
				dr.DiscordID = value.String
			}
		case discordrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dr.Name = value.String
			}
		case discordrole.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				dr.Color = new(string)
				*dr.Color = value.String
			}
		case discordrole.FieldManaged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field managed", values[i])
			} else if value.Valid {
				dr.Managed = value.Bool
			}
		case discordrole.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field discord_guild_roles", value)
			} else if value.Valid {
				dr.discord_guild_roles = new(int)
				*dr.discord_guild_roles = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGuild queries the "guild" edge of the DiscordRole entity.
func (dr *DiscordRole) QueryGuild() *DiscordGuildQuery {
	return (&DiscordRoleClient{config: dr.config}).QueryGuild(dr)
}

// Update returns a builder for updating this DiscordRole.
// Note that you need to call DiscordRole.Unwrap() before calling this method if this DiscordRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DiscordRole) Update() *DiscordRoleUpdateOne {
	return (&DiscordRoleClient{config: dr.config}).UpdateOne(dr)
}

// Unwrap unwraps the DiscordRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DiscordRole) Unwrap() *DiscordRole {
	tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscordRole is not a transactional entity")
	}
	dr.config.driver = tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DiscordRole) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordRole(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteString(", discord_id=")
	builder.WriteString(dr.DiscordID)
	builder.WriteString(", name=")
	builder.WriteString(dr.Name)
	if v := dr.Color; v != nil {
		builder.WriteString(", color=")
		builder.WriteString(*v)
	}
	builder.WriteString(", managed=")
	builder.WriteString(fmt.Sprintf("%v", dr.Managed))
	builder.WriteByte(')')
	return builder.String()
}

// DiscordRoles is a parsable slice of DiscordRole.
type DiscordRoles []*DiscordRole

func (dr DiscordRoles) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
