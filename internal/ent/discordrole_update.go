// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/internal/ent/discordguild"
	"entgo.io/bug/internal/ent/discordrole"
	"entgo.io/bug/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiscordRoleUpdate is the builder for updating DiscordRole entities.
type DiscordRoleUpdate struct {
	config
	hooks    []Hook
	mutation *DiscordRoleMutation
}

// Where appends a list predicates to the DiscordRoleUpdate builder.
func (dru *DiscordRoleUpdate) Where(ps ...predicate.DiscordRole) *DiscordRoleUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetDiscordID sets the "discord_id" field.
func (dru *DiscordRoleUpdate) SetDiscordID(s string) *DiscordRoleUpdate {
	dru.mutation.SetDiscordID(s)
	return dru
}

// SetName sets the "name" field.
func (dru *DiscordRoleUpdate) SetName(s string) *DiscordRoleUpdate {
	dru.mutation.SetName(s)
	return dru
}

// SetColor sets the "color" field.
func (dru *DiscordRoleUpdate) SetColor(s string) *DiscordRoleUpdate {
	dru.mutation.SetColor(s)
	return dru
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (dru *DiscordRoleUpdate) SetNillableColor(s *string) *DiscordRoleUpdate {
	if s != nil {
		dru.SetColor(*s)
	}
	return dru
}

// ClearColor clears the value of the "color" field.
func (dru *DiscordRoleUpdate) ClearColor() *DiscordRoleUpdate {
	dru.mutation.ClearColor()
	return dru
}

// SetManaged sets the "managed" field.
func (dru *DiscordRoleUpdate) SetManaged(b bool) *DiscordRoleUpdate {
	dru.mutation.SetManaged(b)
	return dru
}

// SetNillableManaged sets the "managed" field if the given value is not nil.
func (dru *DiscordRoleUpdate) SetNillableManaged(b *bool) *DiscordRoleUpdate {
	if b != nil {
		dru.SetManaged(*b)
	}
	return dru
}

// SetGuildID sets the "guild" edge to the DiscordGuild entity by ID.
func (dru *DiscordRoleUpdate) SetGuildID(id int) *DiscordRoleUpdate {
	dru.mutation.SetGuildID(id)
	return dru
}

// SetNillableGuildID sets the "guild" edge to the DiscordGuild entity by ID if the given value is not nil.
func (dru *DiscordRoleUpdate) SetNillableGuildID(id *int) *DiscordRoleUpdate {
	if id != nil {
		dru = dru.SetGuildID(*id)
	}
	return dru
}

// SetGuild sets the "guild" edge to the DiscordGuild entity.
func (dru *DiscordRoleUpdate) SetGuild(d *DiscordGuild) *DiscordRoleUpdate {
	return dru.SetGuildID(d.ID)
}

// Mutation returns the DiscordRoleMutation object of the builder.
func (dru *DiscordRoleUpdate) Mutation() *DiscordRoleMutation {
	return dru.mutation
}

// ClearGuild clears the "guild" edge to the DiscordGuild entity.
func (dru *DiscordRoleUpdate) ClearGuild() *DiscordRoleUpdate {
	dru.mutation.ClearGuild()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DiscordRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			if dru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DiscordRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DiscordRoleUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DiscordRoleUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DiscordRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordrole.Table,
			Columns: discordrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordrole.FieldID,
			},
		},
	}
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.DiscordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordrole.FieldDiscordID,
		})
	}
	if value, ok := dru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordrole.FieldName,
		})
	}
	if value, ok := dru.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordrole.FieldColor,
		})
	}
	if dru.mutation.ColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: discordrole.FieldColor,
		})
	}
	if value, ok := dru.mutation.Managed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: discordrole.FieldManaged,
		})
	}
	if dru.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordrole.GuildTable,
			Columns: []string{discordrole.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordguild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordrole.GuildTable,
			Columns: []string{discordrole.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordguild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DiscordRoleUpdateOne is the builder for updating a single DiscordRole entity.
type DiscordRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscordRoleMutation
}

// SetDiscordID sets the "discord_id" field.
func (druo *DiscordRoleUpdateOne) SetDiscordID(s string) *DiscordRoleUpdateOne {
	druo.mutation.SetDiscordID(s)
	return druo
}

// SetName sets the "name" field.
func (druo *DiscordRoleUpdateOne) SetName(s string) *DiscordRoleUpdateOne {
	druo.mutation.SetName(s)
	return druo
}

// SetColor sets the "color" field.
func (druo *DiscordRoleUpdateOne) SetColor(s string) *DiscordRoleUpdateOne {
	druo.mutation.SetColor(s)
	return druo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (druo *DiscordRoleUpdateOne) SetNillableColor(s *string) *DiscordRoleUpdateOne {
	if s != nil {
		druo.SetColor(*s)
	}
	return druo
}

// ClearColor clears the value of the "color" field.
func (druo *DiscordRoleUpdateOne) ClearColor() *DiscordRoleUpdateOne {
	druo.mutation.ClearColor()
	return druo
}

// SetManaged sets the "managed" field.
func (druo *DiscordRoleUpdateOne) SetManaged(b bool) *DiscordRoleUpdateOne {
	druo.mutation.SetManaged(b)
	return druo
}

// SetNillableManaged sets the "managed" field if the given value is not nil.
func (druo *DiscordRoleUpdateOne) SetNillableManaged(b *bool) *DiscordRoleUpdateOne {
	if b != nil {
		druo.SetManaged(*b)
	}
	return druo
}

// SetGuildID sets the "guild" edge to the DiscordGuild entity by ID.
func (druo *DiscordRoleUpdateOne) SetGuildID(id int) *DiscordRoleUpdateOne {
	druo.mutation.SetGuildID(id)
	return druo
}

// SetNillableGuildID sets the "guild" edge to the DiscordGuild entity by ID if the given value is not nil.
func (druo *DiscordRoleUpdateOne) SetNillableGuildID(id *int) *DiscordRoleUpdateOne {
	if id != nil {
		druo = druo.SetGuildID(*id)
	}
	return druo
}

// SetGuild sets the "guild" edge to the DiscordGuild entity.
func (druo *DiscordRoleUpdateOne) SetGuild(d *DiscordGuild) *DiscordRoleUpdateOne {
	return druo.SetGuildID(d.ID)
}

// Mutation returns the DiscordRoleMutation object of the builder.
func (druo *DiscordRoleUpdateOne) Mutation() *DiscordRoleMutation {
	return druo.mutation
}

// ClearGuild clears the "guild" edge to the DiscordGuild entity.
func (druo *DiscordRoleUpdateOne) ClearGuild() *DiscordRoleUpdateOne {
	druo.mutation.ClearGuild()
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DiscordRoleUpdateOne) Select(field string, fields ...string) *DiscordRoleUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DiscordRole entity.
func (druo *DiscordRoleUpdateOne) Save(ctx context.Context) (*DiscordRole, error) {
	var (
		err  error
		node *DiscordRole
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiscordRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			if druo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DiscordRoleUpdateOne) SaveX(ctx context.Context) *DiscordRole {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DiscordRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DiscordRoleUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DiscordRoleUpdateOne) sqlSave(ctx context.Context) (_node *DiscordRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   discordrole.Table,
			Columns: discordrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: discordrole.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscordRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discordrole.FieldID)
		for _, f := range fields {
			if !discordrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discordrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.DiscordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordrole.FieldDiscordID,
		})
	}
	if value, ok := druo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordrole.FieldName,
		})
	}
	if value, ok := druo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: discordrole.FieldColor,
		})
	}
	if druo.mutation.ColorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: discordrole.FieldColor,
		})
	}
	if value, ok := druo.mutation.Managed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: discordrole.FieldManaged,
		})
	}
	if druo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordrole.GuildTable,
			Columns: []string{discordrole.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordguild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordrole.GuildTable,
			Columns: []string{discordrole.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: discordguild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscordRole{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discordrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
